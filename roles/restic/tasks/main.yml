- name: install restic
  apt:
    name:
      - restic
    cache_valid_time: 600
  register: restic_install

- name: update restic
  command: restic self-update
  when: restic_install.changed

- name: create restic configuration directory
  file:
    path: "{{ restic_config_dir }}"
    state: directory
    owner: "{{ nas.user.name }}"
    group: "{{ nas.user.name }}"

- name: store restic password
  copy:
    content: "{{ restic_repository_password }}"
    dest: "{{ restic_password_file_path }}"
    owner: "{{ nas.user.name }}"
    group: "{{ nas.user.name }}"
    mode: 0600

- name: create local restic repository directory
  file:
    path: "{{ backup.local_repository }}"
    state: directory
    owner: "{{ nas.user.name }}"
    group: "{{ nas.user.name }}"

- name: create foreign restic repository directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ nas.user.name }}"
    group: "{{ nas.user.name }}"
  with_list: "{{ backup.local_foreign_repositories }}"

- name: create script directory
  file:
    path: "{{ restic_wrapper_script_dir }}"
    owner: "{{ nas.user.name }}"
    group: "{{ nas.user.name }}"
    state: directory

- name: create script log directory
  file:
    path: "{{ restic_wrapper_log_dir }}"
    owner: "{{ nas.user.name }}"
    group: "{{ nas.user.name }}"
    state: directory

- name: template wrapper script
  template:
    src: restic-wrapper.sh
    dest: "{{ restic_wrapper_script_path }}"
    owner: "{{ nas.user.name }}"
    group: "{{ nas.user.name }}"
    mode: 0755

- name: prepare to backup as root
  blockinfile:
    path: /etc/sudoers
    block: |
      {{ nas.user.name }} ALL=(root) NOPASSWD: /usr/bin/restic backup *
      {{ nas.user.name }} ALL=(root) NOPASSWD: /usr/bin/chown -R {{ nas.user.name }}\: {{ backup.local_repository }}
    validate: visudo -cf %s
    marker: "# [ANSIBLE] {mark} grant NAS to create backups as root"

- name: create SSH configuration entry for remote repository host
  blockinfile:
    path: "{{ nas_ssh_dir }}/config"
    block: "{{ lookup('template', 'ssh/config') }}"
    owner: "{{ nas.user.name }}"
    group: "{{ nas.user.name }}"
    mode: 0600
    create: yes
    marker: "# [ANSIBLE] {mark} access remote NAS to store backups"

- name: schedule restic backup
  cron:
    name: "backup NAS"
    job: "{{ restic_wrapper_script_path }} -u '{{ nas.user.name }}' -p '{{ restic_password_file_path }}' -r '{{ backup.local_repository }}' -b '{{ backup.remote_repository }}' -l '{{ restic_wrapper_log_dir }}' -m '{{ mail_recipient }}' {{ backup.source_directory }}"
    user: "{{ nas.user.name }}"
    minute: "0"
    hour: "2"
    weekday: "0"
